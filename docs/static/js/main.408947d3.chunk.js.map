{"version":3,"sources":["components/CategroyAdd.jsx","helpers/getGifs.js","hooks/useFetchGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","GitExpertApp.jsx","reportWebVitals.js","index.js"],"names":["CategroyAdd","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","console","log","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","gifs","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GitExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAiBzC,OACE,mCACE,sBAAMC,SAXW,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,SACpBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAMd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBlB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3BC,QAAQC,IAAIF,EAAOF,OACnBR,EAAcU,EAAOF,e,gCCRZK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,+BAMAI,MAAMF,GANN,cAMbG,EANa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAPW,UASAA,EAAKC,KAAI,SAACC,GAAS,IAAD,EACnC,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAbnB,eASbY,EATa,yBAgBZA,GAhBY,kCAkBnBjB,QAAQC,IAAR,MAlBmB,0DAAH,sDCcLiB,EAZM,SAACf,GAAc,IAAD,EACPhB,mBAAS,CAAEuB,KAAM,GAAIS,SAAS,IADvB,mBAC1BC,EAD0B,KACnBC,EADmB,KASjC,OANAC,qBAAU,WACRpB,EAAQC,GAAUoB,MAAK,SAACC,GACtBH,EAAS,CAAEF,SAAS,EAAOT,KAAMc,SAElC,CAACrB,IAEGiB,GCAMK,EATK,SAAC,GAAuB,EAArBZ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAChC,OACE,sBAAKqB,UAAU,yCAAf,UACE,qBAAKC,IAAKtB,EAAKuB,IAAKd,IACpB,4BAAIA,QCiBKe,EAlBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACEe,EAAaf,GAAjCY,EADkB,EACxBL,KAAcS,EADU,EACVA,QAEtB,OACE,qCACE,6BAAKhB,IAEJgB,GAAW,2CAEZ,qBAAKO,UAAU,YAAf,SACGX,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCWjBiB,EAtBM,WAAO,IAAD,EACW3C,mBAAS,CAAC,cADrB,mBAClBQ,EADkB,KACNT,EADM,KAOzB,OACE,qCACE,gDACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACGS,EAAWgB,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCRT4B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.408947d3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategroyAdd = ({ setcategories }) => {\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  const handleInputChange = ({ target }) => {\r\n    console.log(target.value);\r\n    setinputValue(target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length) {\r\n      setcategories((categories) => [inputValue, ...categories]);\r\n      setinputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nCategroyAdd.propTypes = {\r\n  setcategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CategroyAdd;\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=sdFCjcowD6iaUBBO8bsBzWtNHOyVxwQh&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n\r\n  try {\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = await data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gifs;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({ loading: false, data: imgs });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p>Loading...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React from 'react';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport CategroyAdd from './components/CategroyAdd';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n  const [categories, setcategories] = useState(['One Punch']);\r\n\r\n  const handleAdd = () => {\r\n    setcategories([...categories, 'Hunter X Hunter']);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Git Expert App</h2>\r\n      <hr />\r\n\r\n      <CategroyAdd setcategories={setcategories} />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GitExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}